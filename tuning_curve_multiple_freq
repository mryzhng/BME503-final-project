#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Nov 27 20:06:36 2018

@author: talafakhoury
"""

## Tuning curve front end code

# # TO DO
# gotta edit so that this whole things works over time. We could add an entire loop 
# but maybe there is a matrix way of doing this so that it's faster?

# review transformation to radians make sure it is doing what it is supposed to do
# verify role of fmin and fmax and optimal values 

# current value has to update in both loops, not sure how to do that yet. 

# code currently modulates input current to 
from brian2 import *
import matplotlib.pyplot as plt
# %matplotlib qt

## Initialize variables for front end sensory system
N = 7 # number of neurons to simulate
tuning_frequencies = [220.0 , 246.9 , 261.6 , 293.7 , 329.6 , 349.2 , 392.0] # prefered frequencies for neuron group 
inputfreq = array([220, 260, 340, 400, 650, 340]) # input freq
g=10 # maximum firing rate at prefered frequency
at= 0.95 # width parameter 

a = 0.02  # Izhikevich LTS neurons parameters
b = 0.2
c = -65
d = 0.5

tau_syn=1.0 # (from bug model)
g_synpk=0.4
g_synmaxval=(g_synpk/(tau_syn*exp(-1)))
Esyn = 40


## Defining functions 
# tuning curve function
def neuron_tuning(s,fpref):
    lengthsi=size(s) # s is the x vector or different frequency values in a range going from -p 
    current=0.0*linspace(-pi,pi,lengthsi) # initialize dummy array to replace with firing value = used as current input
    for i in range(0,lengthsi):
       if (cos(s[i]-fpref) > at and abs(s[i]-fpref)<pi): # sets the condition for non 0 inputs 
           # has to be set at > at to make sure we get a perfect upper half of a sine wave
           current[i]=g/(1-at)*(cos(s[i]-fpref)-at) # cos(s-spref) should yield cos(0)=1 max value when s = spref
       else:
           current[i]=0
    return current

def f2rad(freq, fmin, fmax): # give out radian anlge for frequency, which we can keep because it scales everything to -pi to pi 
    # gotta double check the function and make sure it is exactly doing what it is supposed to do 
    frange = fmax - fmin
    fdiff = freq - fmin
    fradian = (fdiff/frange)*2*pi
    return fradian

## Izhi equations
# we need to find a way to incorporate the ?? what are you trying to say here Tala... smh 
neuron_eqs = '''
fchar : 1
I : 1

# Izhikevich model
dv/dt = (0.04*(v**2) + 5*v + 140 - u + I + g*(Esyn-v))/ms : 1
du/dt = a*(b*v - u)/ms : 1

# Alpha synapse model
dz/dt = (-z / tau_syn)/ms : 1
dg/dt = ((-g/tau_syn) + z)/ms : 1
'''
neuron_reset = '''
v = c
u = u + d
'''


## Defining neuron groups

# 7 hardcoded neurons 
nA3 = NeuronGroup(1, neuron_eqs, clock=Clock(0.2*ms), threshold = "v>=30", reset = neuron_reset,method='euler')
nA3.v = c
nA3.u = c*b
nA3.fchar = 220.0

nB3 = NeuronGroup(1, neuron_eqs, clock=Clock(0.2*ms), threshold = "v>=30", reset = neuron_reset,method='euler')
nB3.v = c
nB3.u = c*b
nB3.fchar = 246.9 

nC4 = NeuronGroup(1, neuron_eqs, clock=Clock(0.2*ms), threshold = "v>=30", reset = neuron_reset,method='euler')
nC4.v = c
nC4.u = c*b
nC4.fchar = 261.6 

nD4 = NeuronGroup(1, neuron_eqs, clock=Clock(0.2*ms), threshold = "v>=30", reset = neuron_reset,method='euler')
nD4.v = c
nD4.u = c*b
nD4.fchar = 293.7 

nE4 = NeuronGroup(1, neuron_eqs, clock=Clock(0.2*ms), threshold = "v>=30", reset = neuron_reset,method='euler')
nE4.v = c
nE4.u = c*b
nE4.fchar = 329.6 

nF4 = NeuronGroup(1, neuron_eqs, clock=Clock(0.2*ms), threshold = "v>=30", reset = neuron_reset,method='euler')
nF4.v = c
nF4.u = c*b
nF4.fchar = 349.2 

nG4 = NeuronGroup(1, neuron_eqs, clock=Clock(0.2*ms), threshold = "v>=30", reset = neuron_reset,method='euler')
nG4.v = c
nG4.u = c*b
nG4.fchar = 392.0


for i in range (0, inputfreq.size): # outputting 
    # loop ranges across the different input frequencies which would be the time output of the finhgerprint freq vs time
    nA3.I = nA3.I + neuron_tuning(f2rad(linspace(inputfreq[i],inputfreq[i],1),220,440),f2rad(nA3.fchar,220,440))
    nB3.I = nB3.I + neuron_tuning(f2rad(linspace(inputfreq[i],inputfreq[i],1),220,440),f2rad(nB3.fchar,220,440))
    nC4.I = nC4.I + neuron_tuning(f2rad(linspace(inputfreq[i],inputfreq[i],1),220,440),f2rad(nC4.fchar,220,440))
    nD4.I = nD4.I + neuron_tuning(f2rad(linspace(inputfreq[i],inputfreq[i],1),220,440),f2rad(nD4.fchar,220,440))
    nE4.I = nE4.I + neuron_tuning(f2rad(linspace(inputfreq[i],inputfreq[i],1),220,440),f2rad(nE4.fchar,220,440))
    nF4.I = nF4.I + neuron_tuning(f2rad(linspace(inputfreq[i],inputfreq[i],1),220,440),f2rad(nF4.fchar,220,440))
    nG4.I = nG4.I + neuron_tuning(f2rad(linspace(inputfreq[i],inputfreq[i],1),220,440),f2rad(nG4.fchar,220,440))

si=np.linspace(200,500,1000) # range of frequencies we are testing the neurons to
curveA3=neuron_tuning(f2rad(si,220,440),f2rad(nA3.fchar,220,440))
curveB3=neuron_tuning(f2rad(si,220,440),f2rad(nB3.fchar,220,440))
curveC4=neuron_tuning(f2rad(si,220,440),f2rad(nC4.fchar,220,440))
curveD4=neuron_tuning(f2rad(si,220,440),f2rad(nD4.fchar,220,440))
curveE4=neuron_tuning(f2rad(si,220,440),f2rad(nE4.fchar,220,440))
curveF4=neuron_tuning(f2rad(si,220,440),f2rad(nF4.fchar,220,440))
curveG4=neuron_tuning(f2rad(si,220,440),f2rad(nG4.fchar,220,440))

# state monitor
MA3 = StateMonitor(nA3, ('v','I'), record=True)
MB3 = StateMonitor(nB3, ('v','I'), record=True)
MC4 = StateMonitor(nC4, ('v','I'), record=True)
MD4 = StateMonitor(nD4, ('v','I'), record=True)
ME4 = StateMonitor(nE4, ('v','I'), record=True)
MF4 = StateMonitor(nF4, ('v','I'), record=True)
MG4 = StateMonitor(nG4, ('v','I'), record=True)

# recording spikes
smA3 = SpikeMonitor(nA3)
smB3 = SpikeMonitor(nB3)
smC4 = SpikeMonitor(nC4)
smD4 = SpikeMonitor(nD4)
smE4 = SpikeMonitor(nE4)
smF4 = SpikeMonitor(nF4)
smG4 = SpikeMonitor(nG4)

run(100*ms,report='text') # duration of stimulation with frequency inputs


## -------------


# edited sensory neuron group
sensory_neurons = NeuronGroup(N, neuron_eqs, clock=Clock(0.2*ms), threshold = "v>=30", reset = neuron_reset,method='euler')
sensory_neurons.v = c # same Izhi equations
sensory_neurons.u = c*b
sensory_neurons.fchar[i] = tuning_frequencies[i]

for i in range (0, inputfreq.size): # outputting 
    for n in range (0, N):
        sensory_neurons.I[n] = sensory_neurons.I[n] + neuron_tuning(f2rad(linspace(inputfreq[i],inputfreq[i],1),220,440),f2rad(sensory_neurons.fchar[n],220,440))
        # loop has to output matris with size numel(frequency_inputs) x N) right now its replacing the 
        # loop ranges across the different frequency inputs and calculates the current at each neuron
        # does not however integrate the firing? Oh it only sums the current at each frequency
        # output of this loop would be the total current stimulation the sensory neurons 
        # calculated by summing the current that it should receive for each frequency inputed. 
    
SN = StateMonitor(sensory_neurons, ('v','I'), record=True) # state monitor for action potential tracking
Spike_sensory_neurons = SpikeMonitor(sensory_neurons) # recording spikes















## Plotting 

# tuning curves plotting versus different values of frequencies across audible range (20 to 20kHz)
figure(1)
clf()
hold(True)
plot(si,curveA3)
plot(si,curveB3)
plot(si,curveC4)
plot(si,curveD4)
plot(si,curveE4)
plot(si,curveF4)
plot(si,curveG4)


figure(2)
clf()
subplot(4,2,1)
plot(MA3.t/ms, MA3.v[0])
subplot(4,2,2)
plot(MB3.t/ms, MB3.v[0])
subplot(4,2,3)
plot(MC4.t/ms, MC4.v[0])
subplot(4,2,4)
plot(MD4.t/ms, MD4.v[0])
subplot(4,2,5)
plot(ME4.t/ms, ME4.v[0])
subplot(4,2,6)
plot(MF4.t/ms, MF4.v[0])
subplot(4,2,7)
plot(MG4.t/ms, MG4.v[0])

figure(3)
clf()
subplot(4,2,1)
plot(MA3.t/ms, MA3.I[0])
subplot(4,2,2)
plot(MB3.t/ms, MB3.I[0])
subplot(4,2,3)
plot(MC4.t/ms, MC4.I[0])
subplot(4,2,4)
plot(MD4.t/ms, MD4.I[0])
subplot(4,2,5)
plot(ME4.t/ms, ME4.I[0])
subplot(4,2,6)
plot(MF4.t/ms, MF4.I[0])
subplot(4,2,7)
plot(MG4.t/ms, MG4.I[0])

figure(4)
clf()
hold(True)
plot(smA3.t/ms, smA3.i+1, 'k*')
plot(smB3.t/ms, smB3.i+2, 'k*')
plot(smC4.t/ms, smC4.i+3, 'k*')
plot(smD4.t/ms, smD4.i+4, 'k*')
plot(smE4.t/ms, smE4.i+5, 'k*')
plot(smF4.t/ms, smF4.i+6, 'k*')
plot(smG4.t/ms, smG4.i+7, 'k*')
ylim(0, 8)
yticks(np.arange(8), ('', 'A3', 'B3', 'C4', 'D4', 'E4', 'F4', 'G4'))


