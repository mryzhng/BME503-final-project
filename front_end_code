#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Wed Dec  5 13:35:29 2018

@author: talafakhoury
"""
## FRONT END CODEEE














#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Nov 27 20:06:36 2018

@author: talafakhoury
"""

## Tuning curve front end code

# # TO DO
# gotta edit so that this whole things works over time. We could add an entire loop 
# but maybe there is a matrix way of doing this so that it's faster?

# review transformation to radians make sure it is doing what it is supposed to do
# verify role of fmin and fmax and optimal values !!! <--- 


# code currently modulates input current to 
from brian2 import *
import matplotlib.pyplot as plt
import random
import numpy as np   
# %matplotlib qt



## SONGG INPUT (where 0/1 by time point matrix goes in)
## Simulation ------------------------------
songfreq = np.random.randint(20,20000, size=(6,5)) # input frequencies to the song
#inputfreq = array([460, 2055, 9200, 15512, 16730, 19788])

## Initialize variables for front end sensory system

N = 1000 # number of neurons to simulate
order = math.ceil(sqrt(N)) # for plotting purposes
#tuning_frequencies = [220.0 , 246.9 , 261.6 , 293.7 , 329.6 , 349.2 , 392.0] 
tuning_frequencies = linspace(20,20000,N) # prefered frequencies for neuron group 
 
Io=5 # maximum firing rate at prefered frequency
at= 0.99# width parameter 


# Izhikevich LTS neurons parameters
a = 0.02  
b = 0.2
c = -65
d = 0.5

tau_syn=1.0 # (from bug model)
g_synpk=0.4
g_synmaxval=(g_synpk/(tau_syn*exp(-1)))
Esyn = 40


## Defining functions 
# tuning curve function
def neuron_tuning(s,fpref):
    lengths=size(s) # s is the x vector or different frequency values in a range going from -p 
    current=0.0*linspace(-pi,pi,lengths) # initialize dummy array to replace with firing value = used as current input
    for i in range(0,lengths):
       if (cos(s[i]-fpref) > at and abs(s[i]-fpref)<pi): # sets the condition for non 0 inputs 
           # has to be set at > at to make sure we get a perfect upper half of a sine wave
           current[i]=Io/(1-at)*(cos(s[i]-fpref)-at) # cos(s-spref) should yield cos(0)=1 max value when s = spref
       else:
           current[i]=0
    return current

def f2rad(freq, fmin, fmax): # give out radian anlge for frequency, which we can keep because it scales everything to -pi to pi 
    # gotta double check the function and make sure it is exactly doing what it is supposed to do 
    frange = fmax - fmin
    fdiff = freq - fmin
    fradian = (fdiff/frange)*2*pi
    return fradian

## Izhi equations
# we need to find a way to incorporate the ?? what are you trying to say here Tala... smh 
neuron_eqs = '''
fchar : 1
I : 1

# Izhikevich model
dv/dt = (0.04*(v**2) + 5*v + 140 - u + I + g*(Esyn-v))/ms : 1
du/dt = a*(b*v - u)/ms : 1

# Alpha synapse model
dz/dt = (-z / tau_syn)/ms : 1
dg/dt = ((-g/tau_syn) + z)/ms : 1
'''
neuron_reset = '''
v = c
u = u + d
'''


## Defining sensory neuron group -----------

sensory_neurons = NeuronGroup(N, neuron_eqs, clock=Clock(0.2*ms), threshold = "v>=30", reset = neuron_reset,method='euler')
sensory_neurons.v = c # same Izhi equations
sensory_neurons.u = c*b
sensory_neurons.fchar = tuning_frequencies


for f in range (0,len(songfreq[0])):
    plt.figure()
    inputfreq = songfreq.T[f]
    ## extract frequency infoirmation from 0/1 input array
    
    
    for i in range (0, len(songfreq)): # outputting 
        for n in range (0, N):
            sensory_neurons.I[n] = sensory_neurons.I[n] + neuron_tuning(f2rad(linspace(inputfreq[i],inputfreq[i],1),220,440),f2rad(sensory_neurons.fchar[n],220,440))
            # loop has to output matris with size numel(frequency_inputs) x N) right now its replacing the 
            # loop ranges across the different frequency inputs and calculates the current at each neuron
            # does not however integrate the firing? Oh it only sums the current at each frequency
            # output of this loop would be the total current stimulation the sensory neurons 
            # calculated by summing the current that it should receive for each frequency inputed. 
    
    ## Running Monitors ------------------------
            
    # SM SPM for the group of neurons  
    SN = StateMonitor(sensory_neurons, ('v','I'), record=True) # state monitor for action potential tracking
    SPM = SpikeMonitor(sensory_neurons) # recording spikes
    
    run(100*ms,report='text') # duration of stimulation with frequency inputs equal to average length of tone in songs
    # to be changed according to time resolution in song
    
    
    
    
    ## Plotting --------------------------------
    
    # to get tuning curve of each neuron should be in the N loop

    
    #figure(2)
    #for n in range (0, N):
    #    subplot(order,order,n+1)
    #    plot(SN.t/ms, SN.v[n])
    #     
    #figure(3)
    #for n in range (0, N):
    #    subplot(order,order,n+1)
    #    plot(SN.t/ms, SN.I[n])   
    plot(SPM.t/ms, SPM.i, 'k.')
    ylim((-10, N+10)) 

## For plotting tuning curves - not useful if N>50
#s = np.linspace(20,20000,10000)
#figure(1)
#for n in range (0, N):
#   curve = neuron_tuning(f2rad(s,20,20000),f2rad(sensory_neurons.fchar[n],20,20000))
#   hold(True)
#   plot(s,curve)
#   ylim((-1, 7))
    
    
    
    
    